// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bw_allocation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BandwithAllocationServiceClient is the client API for BandwithAllocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BandwithAllocationServiceClient interface {
	//  Reserve returns a bandwidth reservation for the given request.
	Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error)
}

type bandwithAllocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBandwithAllocationServiceClient(cc grpc.ClientConnInterface) BandwithAllocationServiceClient {
	return &bandwithAllocationServiceClient{cc}
}

func (c *bandwithAllocationServiceClient) Reserve(ctx context.Context, in *ReserveRequest, opts ...grpc.CallOption) (*ReserveResponse, error) {
	out := new(ReserveResponse)
	err := c.cc.Invoke(ctx, "/anapaya.proto.bw_allocation.v1.BandwithAllocationService/Reserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BandwithAllocationServiceServer is the server API for BandwithAllocationService service.
// All implementations should embed UnimplementedBandwithAllocationServiceServer
// for forward compatibility
type BandwithAllocationServiceServer interface {
	//  Reserve returns a bandwidth reservation for the given request.
	Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error)
}

// UnimplementedBandwithAllocationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBandwithAllocationServiceServer struct {
}

func (UnimplementedBandwithAllocationServiceServer) Reserve(context.Context, *ReserveRequest) (*ReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reserve not implemented")
}

// UnsafeBandwithAllocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BandwithAllocationServiceServer will
// result in compilation errors.
type UnsafeBandwithAllocationServiceServer interface {
	mustEmbedUnimplementedBandwithAllocationServiceServer()
}

func RegisterBandwithAllocationServiceServer(s grpc.ServiceRegistrar, srv BandwithAllocationServiceServer) {
	s.RegisterService(&_BandwithAllocationService_serviceDesc, srv)
}

func _BandwithAllocationService_Reserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BandwithAllocationServiceServer).Reserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anapaya.proto.bw_allocation.v1.BandwithAllocationService/Reserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BandwithAllocationServiceServer).Reserve(ctx, req.(*ReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BandwithAllocationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anapaya.proto.bw_allocation.v1.BandwithAllocationService",
	HandlerType: (*BandwithAllocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Reserve",
			Handler:    _BandwithAllocationService_Reserve_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/bw_allocation/v1/bw_allocation.proto",
}
